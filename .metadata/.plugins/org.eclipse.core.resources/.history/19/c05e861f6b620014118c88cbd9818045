import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/*
 * Created on 6 sept. 2005
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */

/**
 * Cette classe modélise une application graphique de visualisation
 * de formes. Elle dérive de JFrame, qui est une fenêtre SWING "light".
 * 
 * @author lachaud
 *
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public class VisualiseurDeFormes extends JFrame 
{
	/**
	 * Référence l'objet servant à générer des nombres aléatoires.
	 */
	private Random m_random;
	
	/**
	 * Référence la liste des formes à dessiner.
	 */
	private Vector m_formes;
	
	/**
	 * Référence l'objet où les formes se dessinent.
	 */
	private ZoneDeDessin m_panneau_dessin;
	
	/**
	 * Référence l'objet où sont placés les boutons.
	 */
	private JPanel m_panneau_boutons;
	
	/**
	 * Cette classe modélise la réaction de création d'un cercle suite
	 * à un clic sur un bouton. C'est une classe interne à 
	 * VisualiseurDeFormes.
	 * 
	 * @author lachaud
	 *
	 * To change the template for this generated type comment go to
	 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
	 */
	class BoutonCercleAction implements ActionListener
	{
		/**
		 * Référence l'application qui a créé ce bouton.
		 */
		private VisualiseurDeFormes m_visualiseur;
		
		/**
		 * Constructeur.
		 * @param visu est l'application relié à ce bouton.
		 */
		BoutonCercleAction( VisualiseurDeFormes visu )
		{
			m_visualiseur = visu;
		 }
		 
		/**
		 * Crée un nouveau cercle de coordonnées et rayon aléatoire.
		 * suite à l'action [e].
		 * 
		 * @param e l'action qui a déclenchée l'appel à cette méthode.
		 */
		public void actionPerformed( ActionEvent e)
		{
			Random r = m_visualiseur.getRandom();
			Cercle c = new Cercle(
				r.nextInt( 200 ),
				r.nextInt( 200 ),
			    r.nextInt( 40 )+ 20 );
			m_visualiseur.getFormes().add( c );
			m_visualiseur.repaint();
		}
	}
	
	class BoutonRectangleAction implements ActionListener
	{
		/**
		 * Référence l'application qui a créé ce bouton.
		 */
		private VisualiseurDeFormes m_visualiseur;
		
		/**
		 * Constructeur.
		 * @param visu est l'application relié à ce bouton.
		 */
		BoutonRectangleAction( VisualiseurDeFormes visu )
		{
			m_visualiseur = visu;
		 }
		 
		/**
		 * Crée un nouveau cercle de coordonnées et rayon aléatoire.
		 * suite à l'action [e].
		 * 
		 * @param e l'action qui a déclenchée l'appel à cette méthode.
		 */
		public void actionPerformed( ActionEvent e)
		{
			Random r = m_visualiseur.getRandom();
			Rectangle o = new Rectangle(r.nextInt(300),r.nextInt(300),r.nextInt(100)+20,r.nextInt(100)+20);
			m_visualiseur.getFormes().add(o);
			m_visualiseur.repaint();			
		}
	}
	
	class BoutonResetAction implements ActionListener
	{
		/**
		 * Référence l'application qui a créé ce bouton.
		 */
		private VisualiseurDeFormes m_visualiseur;
		
		/**
		 * Constructeur.
		 * @param visu est l'application relié à ce bouton.
		 */
		BoutonResetAction( VisualiseurDeFormes visu )
		{
			m_visualiseur = visu;
		 }
		 
		/**
		 * Crée un nouveau cercle de coordonnées et rayon aléatoire.
		 * suite à l'action [e].
		 * 
		 * @param e l'action qui a déclenchée l'appel à cette méthode.
		 */
		public void actionPerformed( ActionEvent e)
		{
			m_formes.clear();		
			m_visualiseur.repaint();
			
			
		}
	}
	
	public static String str= "prem";
	/**
	 * Constructeur par défaut. 
	 * Crée une fenêtre avec un nom, une zone de dessin 
	 * et une zone pour placer des boutons.
	 */
	public VisualiseurDeFormes()
	{
		super( str );
		//nbrFenetre++;
		//String str;
		switch (str){
		case ("prem"):
		str = "deux";	
		break;
		case ("deux"):
			str = "trois";
		break;
		default:
			str = " mmm";
			break;
		}
		
		m_formes = new Vector();
		m_random = new Random();
		setPreferredSize( new Dimension( 400, 300 ) );
		setLayout( new BorderLayout() );
		m_panneau_dessin = new ZoneDeDessin();
		m_panneau_dessin.setFormes( m_formes );
		m_panneau_boutons = new JPanel();
		JLabel label = new JLabel("Visualiseur de Formes");
		getContentPane().add( label, BorderLayout.NORTH );
		getContentPane().add( m_panneau_boutons, BorderLayout.SOUTH );
		getContentPane().add( m_panneau_dessin, BorderLayout.CENTER );
		
		BoutonCercleAction action_cercle = new BoutonCercleAction( this );
		JButton b1 = new JButton( "Cercle" );
		b1.addActionListener( action_cercle );
		m_panneau_boutons.add( b1 );
		
		BoutonRectangleAction action_rectangle = new BoutonRectangleAction(this);
		JButton b2 = new JButton("Rectangle");
		b2.addActionListener(action_rectangle);
		m_panneau_boutons.add( b2 );
		
		BoutonResetAction action_reset = new BoutonResetAction(this);
		JButton b3 = new JButton("Reset");
		b3.addActionListener(action_reset);
		m_panneau_boutons.add( b3 );
		
		// Indique ce qu'il faut faire si on clic sur "fermer la fenetre".
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	public VisualiseurDeFormes(String str)
	{
		super();
		m_formes = new Vector();
		m_random = new Random();
		setPreferredSize( new Dimension( 400, 300 ) );
		setLayout( new BorderLayout() );
		m_panneau_dessin = new ZoneDeDessin();
		m_panneau_dessin.setFormes( m_formes );
		m_panneau_boutons = new JPanel();
		JLabel label = new JLabel("Visualiseur de Formes");
		getContentPane().add( label, BorderLayout.NORTH );
		getContentPane().add( m_panneau_boutons, BorderLayout.SOUTH );
		getContentPane().add( m_panneau_dessin, BorderLayout.CENTER );
		BoutonCercleAction action_cercle 
			= new BoutonCercleAction( this );
		JButton b1 = new JButton( "Cercle" );
		b1.addActionListener( action_cercle );
		m_panneau_boutons.add( b1 );
		
		// Indique ce qu'il faut faire si on clic sur "fermer la fenetre".
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	/**
	 * Crée une application "Visualiseur de Formes".
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		VisualiseurDeFormes visu = new VisualiseurDeFormes();
		
		//Display the window.
		visu.pack();
		visu.setVisible(true);				
	}
	
	/**
	 * @return le vecteur des formes
	 */
	public Vector getFormes() {
		return m_formes;
	}

	/**
	 * @return l'objet permettant de générer des nombres aléartoires.
	 */
	public Random getRandom() {
		return m_random;
	}

}
